// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom.go

package database

import (
	"context"
)

// iteratorForCreateCommits implements pgx.CopyFromSource.
type iteratorForCreateCommits struct {
	rows                 []CreateCommitsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCommits) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCommits) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Sha,
		r.rows[0].RepositoryID,
		r.rows[0].AuthorName,
		r.rows[0].AuthorEmail,
		r.rows[0].Message,
		r.rows[0].Url,
		r.rows[0].CommitDate,
	}, nil
}

func (r iteratorForCreateCommits) Err() error {
	return nil
}

func (q *Queries) CreateCommits(ctx context.Context, arg []CreateCommitsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"commits"}, []string{"sha", "repository_id", "author_name", "author_email", "message", "url", "commit_date"}, &iteratorForCreateCommits{rows: arg})
}
